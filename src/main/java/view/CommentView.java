package view;

import javax.swing.*;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.awt.event.ActionListener;

import controller.LectureComment;


public class CommentView implements View {

    private JPanel mainPane;
    private JPanel createPane;
    private JPanel listPane;
    private JPanel actionPane;
    private JSeparator topSep;
    private JSeparator bottomSep;
    private JList dataList;
    private JTextField inputField;
    private JButton addButton;
    private JButton deleteButton;

    public CommentView() {
        DefaultListModel listModel = new DefaultListModel();
        dataList.setCellRenderer(new CommentCellRenderer(200));
    }

    //<editor-fold desc="Get/Set Section">
    @Override
    public JPanel getMainPane() {
        return mainPane;
    }
    //</editor-fold>

    public String getInputText() {
        return inputField.getText();
    }

    public void clearInputField() {
        inputField.setText("");
    }

    public void setList(LectureComment[] commentTable) {
        CommentListModel listModel = new CommentListModel();
        for (LectureComment comment : commentTable) {
            listModel.addElement(comment);
        }
        dataList.setModel(listModel);
    }

    public void showOptions() {
        deleteButton.setVisible(true);
    }

    public void hideOptions() {
        deleteButton.setVisible(false);
    }

    public Object getObject(int index) {
        return dataList.getModel().getElementAt(index);
    }

    //<editor-fold desc="Listener Section">
    public void setDeletionListener(ActionListener l) {
        this.deleteButton.addActionListener(l);
    }

    public void setCreationListener(ActionListener l) {
        this.addButton.addActionListener(l);
    }

    public void setSelectionListener(ListSelectionListener l) {
        this.dataList.getSelectionModel().addListSelectionListener(l);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPane = new JPanel();
        mainPane.setLayout(new BorderLayout(0, 0));
        mainPane.setPreferredSize(new Dimension(300, 300));
        mainPane.setVerifyInputWhenFocusTarget(false);
        createPane = new JPanel();
        createPane.setLayout(new BorderLayout(0, 0));
        createPane.setPreferredSize(new Dimension(400, 50));
        mainPane.add(createPane, BorderLayout.NORTH);
        inputField = new JTextField();
        inputField.setPreferredSize(new Dimension(200, 50));
        createPane.add(inputField, BorderLayout.WEST);
        addButton = new JButton();
        addButton.setText("Comment");
        createPane.add(addButton, BorderLayout.CENTER);
        actionPane = new JPanel();
        actionPane.setLayout(new BorderLayout(0, 0));
        actionPane.setPreferredSize(new Dimension(400, 50));
        mainPane.add(actionPane, BorderLayout.SOUTH);
        deleteButton = new JButton();
        deleteButton.setText("Remove");
        actionPane.add(deleteButton, BorderLayout.CENTER);
        listPane = new JPanel();
        listPane.setLayout(new BorderLayout(0, 0));
        listPane.setPreferredSize(new Dimension(400, 200));
        mainPane.add(listPane, BorderLayout.CENTER);
        topSep = new JSeparator();
        listPane.add(topSep, BorderLayout.NORTH);
        bottomSep = new JSeparator();
        listPane.add(bottomSep, BorderLayout.SOUTH);
        final JScrollPane scrollPane1 = new JScrollPane();
        listPane.add(scrollPane1, BorderLayout.CENTER);
        dataList = new JList();
        scrollPane1.setViewportView(dataList);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPane;
    }

    //</editor-fold>

    //<editor-fold desc="Other Class Section">
    class CommentListModel extends DefaultListModel {

    }

    class CommentCellRenderer extends DefaultListCellRenderer {

        public static final String HTML_REG = "<html>\n" +
                "<body style='width: %dpx'>\n" +
                "<p><strong>%s</strong> - %s</p>\n" +
                "<p style=\"text-align: right;\"><span style=\"color: #999999;\"><em>%s</em></span></p>\n" +
                "</html>";

        public static final String HTML_ANSWER = "<html>\n" +
                "<body style='width: %dpx'>\n" +
                "<p style=\"padding-left: 30px;\"><strong>%s</strong> - %s</p>\n" +
                "<p style=\"text-align: right;\"><span style=\"color: #999999;\"><em>%s</em></span></p>\n" +
                "</html>";

        private int width;

        public CommentCellRenderer(int width) {
            this.width = width;
        }

        @Override
        public Component getListCellRendererComponent(JList list, Object value,
                                                      int index, boolean isSelected, boolean cellHasFocus) {
            LectureComment comment = (LectureComment) value;

            String template = comment.getAnswer() ? HTML_ANSWER : HTML_REG;
            String text = String.format(template, width, comment.getAuthor(), comment.getText(), comment.getTime().toString());
            return super.getListCellRendererComponent(list, text, index, isSelected,
                    cellHasFocus);
        }

    }
    //</editor-fold>

}
